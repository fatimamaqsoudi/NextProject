"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/all-applications/page",{

/***/ "(app-pages-browser)/./lib/supabase.ts":
/*!*************************!*\
  !*** ./lib/supabase.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dbFunctions: () => (/* binding */ dbFunctions),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(app-pages-browser)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n// Supabase configuration\nconst supabaseUrl = \"https://rrtymhmlgypvflaycsap.supabase.co\";\nconst supabaseAnonKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJydHltaG1sZ3lwdmZsYXljc2FwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTAxMzU2MDksImV4cCI6MjA2NTcxMTYwOX0.XxdiIrZfQ_2G9Qk3r0mpVLy_wlcv2ned5bJslxB0l3U\";\n// Create Supabase client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(supabaseUrl, supabaseAnonKey);\n// Database Functions\nconst dbFunctions = {\n    // Get all visa applications for an agent\n    async getApplications () {\n        var _session_user;\n        // Fetch the currently signed-in user so we can filter by owner_email\n        const { data: { session }, error: sessErr } = await supabase.auth.getSession();\n        if (sessErr) throw sessErr;\n        var _session_user_email;\n        const email = (_session_user_email = session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) !== null && _session_user_email !== void 0 ? _session_user_email : '';\n        const { data, error } = await supabase.from('visa_applications').select('*').eq('owner_email', email).order('submitted_at', {\n            ascending: false\n        });\n        if (error) throw error;\n        return data;\n    },\n    // Create a new visa application\n    async createApplication (application) {\n        var _session_user;\n        const now = new Date().toISOString();\n        // Attach the owner_email from the current session\n        const { data: { session }, error: sessErr } = await supabase.auth.getSession();\n        if (sessErr) throw sessErr;\n        var _session_user_email;\n        const owner_email = (_session_user_email = session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) !== null && _session_user_email !== void 0 ? _session_user_email : 'unknown@no-session';\n        const { data, error } = await supabase.from('visa_applications').insert([\n            {\n                ...application,\n                owner_email,\n                submitted_at: now,\n                last_updated_at: now\n            }\n        ]).select();\n        if (error) throw error;\n        return data[0];\n    },\n    // Update an existing application\n    async updateApplication (id, updates) {\n        const { data, error } = await supabase.from('visa_applications').update({\n            ...updates,\n            last_updated_at: new Date().toISOString()\n        }).eq('id', id).select();\n        if (error) throw error;\n        return data[0];\n    },\n    // Delete an application\n    async deleteApplication (id) {\n        const { error } = await supabase.from('visa_applications').delete().eq('id', id);\n        if (error) throw error;\n        return true;\n    },\n    // Get analytics data\n    async getAnalytics () {\n        var _session_user;\n        const { data: { session }, error: sessErr } = await supabase.auth.getSession();\n        if (sessErr) throw sessErr;\n        var _session_user_email;\n        const email = (_session_user_email = session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) !== null && _session_user_email !== void 0 ? _session_user_email : '';\n        const { data: applications, error } = await supabase.from('visa_applications').select('*').eq('owner_email', email);\n        if (error) throw error;\n        // Calculate metrics\n        const totalApplications = applications.length;\n        const approvedApplications = applications.filter((app)=>app.application_status === 'APPROVED');\n        const pendingApplications = applications.filter((app)=>app.application_status === 'PENDING');\n        const rejectedApplications = applications.filter((app)=>app.application_status === 'REJECTED');\n        const totalRevenue = approvedApplications.reduce((sum, app)=>sum + app.fees, 0);\n        const totalCosts = approvedApplications.reduce((sum, app)=>sum + app.costs, 0);\n        const totalProfit = totalRevenue - totalCosts;\n        const pendingRevenue = pendingApplications.reduce((sum, app)=>sum + app.fees, 0);\n        const successRate = totalApplications > 0 ? Math.round(approvedApplications.length / totalApplications * 100 * 10) / 10 : 0;\n        return {\n            totalApplications,\n            pendingRevenue,\n            successRate,\n            totalRevenue: totalProfit,\n            approvedCount: approvedApplications.length,\n            pendingCount: pendingApplications.length,\n            rejectedCount: rejectedApplications.length,\n            applications\n        };\n    },\n    // Get monthly analytics for charts\n    async getMonthlyAnalytics () {\n        var _session_user;\n        const { data: { session }, error: sessErr } = await supabase.auth.getSession();\n        if (sessErr) throw sessErr;\n        var _session_user_email;\n        const email = (_session_user_email = session === null || session === void 0 ? void 0 : (_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.email) !== null && _session_user_email !== void 0 ? _session_user_email : '';\n        const { data: applications, error } = await supabase.from('visa_applications').select('*').eq('owner_email', email).gte('submitted_at', new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString()); // Last 12 months\n        if (error) throw error;\n        // Group by month\n        const monthlyData = Array.from({\n            length: 12\n        }, (_, i)=>{\n            const date = new Date();\n            date.setMonth(date.getMonth() - (11 - i));\n            const month = date.toLocaleDateString('en-US', {\n                month: 'short'\n            });\n            const monthApplications = applications.filter((app)=>{\n                const appDate = new Date(app.submitted_at);\n                return appDate.getMonth() === date.getMonth() && appDate.getFullYear() === date.getFullYear();\n            });\n            const approvedThisMonth = monthApplications.filter((app)=>app.application_status === 'APPROVED');\n            const revenue = approvedThisMonth.reduce((sum, app)=>sum + (app.fees - app.costs), 0);\n            const successRate = monthApplications.length > 0 ? Math.round(approvedThisMonth.length / monthApplications.length * 100) : 0;\n            return {\n                month,\n                applications: monthApplications.length,\n                revenue,\n                successRate,\n                pending: monthApplications.filter((app)=>app.application_status === 'PENDING').length\n            };\n        });\n        return monthlyData;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/supabase.ts\n"));

/***/ })

});